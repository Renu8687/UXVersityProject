#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="uxversitDB")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAddBlogTable(AddBlogTable instance);
  partial void UpdateAddBlogTable(AddBlogTable instance);
  partial void DeleteAddBlogTable(AddBlogTable instance);
  partial void InsertDeveloperTable(DeveloperTable instance);
  partial void UpdateDeveloperTable(DeveloperTable instance);
  partial void DeleteDeveloperTable(DeveloperTable instance);
  partial void InsertUserTable(UserTable instance);
  partial void UpdateUserTable(UserTable instance);
  partial void DeleteUserTable(UserTable instance);
  partial void InsertFeedbackTable(FeedbackTable instance);
  partial void UpdateFeedbackTable(FeedbackTable instance);
  partial void DeleteFeedbackTable(FeedbackTable instance);
  partial void InsertDemoTable(DemoTable instance);
  partial void UpdateDemoTable(DemoTable instance);
  partial void DeleteDemoTable(DemoTable instance);
  partial void InsertAdminTable(AdminTable instance);
  partial void UpdateAdminTable(AdminTable instance);
  partial void DeleteAdminTable(AdminTable instance);
  partial void InsertCategoryTable(CategoryTable instance);
  partial void UpdateCategoryTable(CategoryTable instance);
  partial void DeleteCategoryTable(CategoryTable instance);
  partial void InsertToolTable(ToolTable instance);
  partial void UpdateToolTable(ToolTable instance);
  partial void DeleteToolTable(ToolTable instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["uxversitDBConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<AddBlogTable> AddBlogTables
	{
		get
		{
			return this.GetTable<AddBlogTable>();
		}
	}
	
	public System.Data.Linq.Table<DeveloperTable> DeveloperTables
	{
		get
		{
			return this.GetTable<DeveloperTable>();
		}
	}
	
	public System.Data.Linq.Table<UserTable> UserTables
	{
		get
		{
			return this.GetTable<UserTable>();
		}
	}
	
	public System.Data.Linq.Table<FeedbackTable> FeedbackTables
	{
		get
		{
			return this.GetTable<FeedbackTable>();
		}
	}
	
	public System.Data.Linq.Table<DemoTable> DemoTables
	{
		get
		{
			return this.GetTable<DemoTable>();
		}
	}
	
	public System.Data.Linq.Table<AdminTable> AdminTables
	{
		get
		{
			return this.GetTable<AdminTable>();
		}
	}
	
	public System.Data.Linq.Table<CategoryTable> CategoryTables
	{
		get
		{
			return this.GetTable<CategoryTable>();
		}
	}
	
	public System.Data.Linq.Table<ToolTable> ToolTables
	{
		get
		{
			return this.GetTable<ToolTable>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddBlogTable")]
public partial class AddBlogTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _BlogTitle;
	
	private string _ThumbnailPic;
	
	private string _Description;
	
	private string _Pic1;
	
	private string _Pic2;
	
	private string _Pic3;
	
	private System.Nullable<System.DateTime> _Date;
	
	private System.Nullable<int> _CreatedBy;
	
	private EntityRef<DeveloperTable> _DeveloperTable;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnBlogTitleChanging(string value);
    partial void OnBlogTitleChanged();
    partial void OnThumbnailPicChanging(string value);
    partial void OnThumbnailPicChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPic1Changing(string value);
    partial void OnPic1Changed();
    partial void OnPic2Changing(string value);
    partial void OnPic2Changed();
    partial void OnPic3Changing(string value);
    partial void OnPic3Changed();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    #endregion
	
	public AddBlogTable()
	{
		this._DeveloperTable = default(EntityRef<DeveloperTable>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BlogTitle", DbType="VarChar(50)")]
	public string BlogTitle
	{
		get
		{
			return this._BlogTitle;
		}
		set
		{
			if ((this._BlogTitle != value))
			{
				this.OnBlogTitleChanging(value);
				this.SendPropertyChanging();
				this._BlogTitle = value;
				this.SendPropertyChanged("BlogTitle");
				this.OnBlogTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbnailPic", DbType="VarChar(MAX)")]
	public string ThumbnailPic
	{
		get
		{
			return this._ThumbnailPic;
		}
		set
		{
			if ((this._ThumbnailPic != value))
			{
				this.OnThumbnailPicChanging(value);
				this.SendPropertyChanging();
				this._ThumbnailPic = value;
				this.SendPropertyChanged("ThumbnailPic");
				this.OnThumbnailPicChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic1", DbType="VarChar(MAX)")]
	public string Pic1
	{
		get
		{
			return this._Pic1;
		}
		set
		{
			if ((this._Pic1 != value))
			{
				this.OnPic1Changing(value);
				this.SendPropertyChanging();
				this._Pic1 = value;
				this.SendPropertyChanged("Pic1");
				this.OnPic1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic2", DbType="VarChar(MAX)")]
	public string Pic2
	{
		get
		{
			return this._Pic2;
		}
		set
		{
			if ((this._Pic2 != value))
			{
				this.OnPic2Changing(value);
				this.SendPropertyChanging();
				this._Pic2 = value;
				this.SendPropertyChanged("Pic2");
				this.OnPic2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic3", DbType="VarChar(MAX)")]
	public string Pic3
	{
		get
		{
			return this._Pic3;
		}
		set
		{
			if ((this._Pic3 != value))
			{
				this.OnPic3Changing(value);
				this.SendPropertyChanging();
				this._Pic3 = value;
				this.SendPropertyChanged("Pic3");
				this.OnPic3Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
	public System.Nullable<int> CreatedBy
	{
		get
		{
			return this._CreatedBy;
		}
		set
		{
			if ((this._CreatedBy != value))
			{
				if (this._DeveloperTable.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCreatedByChanging(value);
				this.SendPropertyChanging();
				this._CreatedBy = value;
				this.SendPropertyChanged("CreatedBy");
				this.OnCreatedByChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeveloperTable_AddBlogTable", Storage="_DeveloperTable", ThisKey="CreatedBy", OtherKey="Id", IsForeignKey=true)]
	public DeveloperTable DeveloperTable
	{
		get
		{
			return this._DeveloperTable.Entity;
		}
		set
		{
			DeveloperTable previousValue = this._DeveloperTable.Entity;
			if (((previousValue != value) 
						|| (this._DeveloperTable.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DeveloperTable.Entity = null;
					previousValue.AddBlogTables.Remove(this);
				}
				this._DeveloperTable.Entity = value;
				if ((value != null))
				{
					value.AddBlogTables.Add(this);
					this._CreatedBy = value.Id;
				}
				else
				{
					this._CreatedBy = default(Nullable<int>);
				}
				this.SendPropertyChanged("DeveloperTable");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeveloperTable")]
public partial class DeveloperTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Email;
	
	private string _Contact;
	
	private string _Password;
	
	private EntitySet<AddBlogTable> _AddBlogTables;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public DeveloperTable()
	{
		this._AddBlogTables = new EntitySet<AddBlogTable>(new Action<AddBlogTable>(this.attach_AddBlogTables), new Action<AddBlogTable>(this.detach_AddBlogTables));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="VarChar(50)")]
	public string Contact
	{
		get
		{
			return this._Contact;
		}
		set
		{
			if ((this._Contact != value))
			{
				this.OnContactChanging(value);
				this.SendPropertyChanging();
				this._Contact = value;
				this.SendPropertyChanged("Contact");
				this.OnContactChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeveloperTable_AddBlogTable", Storage="_AddBlogTables", ThisKey="Id", OtherKey="CreatedBy")]
	public EntitySet<AddBlogTable> AddBlogTables
	{
		get
		{
			return this._AddBlogTables;
		}
		set
		{
			this._AddBlogTables.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_AddBlogTables(AddBlogTable entity)
	{
		this.SendPropertyChanging();
		entity.DeveloperTable = this;
	}
	
	private void detach_AddBlogTables(AddBlogTable entity)
	{
		this.SendPropertyChanging();
		entity.DeveloperTable = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UId;
	
	private string _Name;
	
	private string _Email;
	
	private string _Contact;
	
	private string _Password;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIdChanging(int value);
    partial void OnUIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public UserTable()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int UId
	{
		get
		{
			return this._UId;
		}
		set
		{
			if ((this._UId != value))
			{
				this.OnUIdChanging(value);
				this.SendPropertyChanging();
				this._UId = value;
				this.SendPropertyChanged("UId");
				this.OnUIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="VarChar(50)")]
	public string Contact
	{
		get
		{
			return this._Contact;
		}
		set
		{
			if ((this._Contact != value))
			{
				this.OnContactChanging(value);
				this.SendPropertyChanging();
				this._Contact = value;
				this.SendPropertyChanged("Contact");
				this.OnContactChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FeedbackTable")]
public partial class FeedbackTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _Name;
	
	private string _Email;
	
	private string _Subject;
	
	private string _Message;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
	
	public FeedbackTable()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject", DbType="VarChar(50)")]
	public string Subject
	{
		get
		{
			return this._Subject;
		}
		set
		{
			if ((this._Subject != value))
			{
				this.OnSubjectChanging(value);
				this.SendPropertyChanging();
				this._Subject = value;
				this.SendPropertyChanged("Subject");
				this.OnSubjectChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="VarChar(MAX)")]
	public string Message
	{
		get
		{
			return this._Message;
		}
		set
		{
			if ((this._Message != value))
			{
				this.OnMessageChanging(value);
				this.SendPropertyChanging();
				this._Message = value;
				this.SendPropertyChanged("Message");
				this.OnMessageChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DemoTable")]
public partial class DemoTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _DemoTitle;
	
	private string _DemoSource;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDemoTitleChanging(string value);
    partial void OnDemoTitleChanged();
    partial void OnDemoSourceChanging(string value);
    partial void OnDemoSourceChanged();
    #endregion
	
	public DemoTable()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoTitle", DbType="NVarChar(MAX)")]
	public string DemoTitle
	{
		get
		{
			return this._DemoTitle;
		}
		set
		{
			if ((this._DemoTitle != value))
			{
				this.OnDemoTitleChanging(value);
				this.SendPropertyChanging();
				this._DemoTitle = value;
				this.SendPropertyChanged("DemoTitle");
				this.OnDemoTitleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DemoSource", DbType="NVarChar(MAX)")]
	public string DemoSource
	{
		get
		{
			return this._DemoSource;
		}
		set
		{
			if ((this._DemoSource != value))
			{
				this.OnDemoSourceChanging(value);
				this.SendPropertyChanging();
				this._DemoSource = value;
				this.SendPropertyChanged("DemoSource");
				this.OnDemoSourceChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminTable")]
public partial class AdminTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _AdminEmail;
	
	private string _Password;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAdminEmailChanging(string value);
    partial void OnAdminEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
	
	public AdminTable()
	{
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminEmail", DbType="VarChar(50)")]
	public string AdminEmail
	{
		get
		{
			return this._AdminEmail;
		}
		set
		{
			if ((this._AdminEmail != value))
			{
				this.OnAdminEmailChanging(value);
				this.SendPropertyChanging();
				this._AdminEmail = value;
				this.SendPropertyChanged("AdminEmail");
				this.OnAdminEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryTable")]
public partial class CategoryTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Id;
	
	private string _CatName;
	
	private string _Pic;
	
	private EntitySet<ToolTable> _ToolTables;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCatNameChanging(string value);
    partial void OnCatNameChanged();
    partial void OnPicChanging(string value);
    partial void OnPicChanged();
    #endregion
	
	public CategoryTable()
	{
		this._ToolTables = new EntitySet<ToolTable>(new Action<ToolTable>(this.attach_ToolTables), new Action<ToolTable>(this.detach_ToolTables));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Id
	{
		get
		{
			return this._Id;
		}
		set
		{
			if ((this._Id != value))
			{
				this.OnIdChanging(value);
				this.SendPropertyChanging();
				this._Id = value;
				this.SendPropertyChanged("Id");
				this.OnIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatName", DbType="VarChar(50)")]
	public string CatName
	{
		get
		{
			return this._CatName;
		}
		set
		{
			if ((this._CatName != value))
			{
				this.OnCatNameChanging(value);
				this.SendPropertyChanging();
				this._CatName = value;
				this.SendPropertyChanged("CatName");
				this.OnCatNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic", DbType="VarChar(MAX)")]
	public string Pic
	{
		get
		{
			return this._Pic;
		}
		set
		{
			if ((this._Pic != value))
			{
				this.OnPicChanging(value);
				this.SendPropertyChanging();
				this._Pic = value;
				this.SendPropertyChanged("Pic");
				this.OnPicChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_ToolTable", Storage="_ToolTables", ThisKey="Id", OtherKey="Cat")]
	public EntitySet<ToolTable> ToolTables
	{
		get
		{
			return this._ToolTables;
		}
		set
		{
			this._ToolTables.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ToolTables(ToolTable entity)
	{
		this.SendPropertyChanging();
		entity.CategoryTable = this;
	}
	
	private void detach_ToolTables(ToolTable entity)
	{
		this.SendPropertyChanging();
		entity.CategoryTable = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ToolTable")]
public partial class ToolTable : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TId;
	
	private System.Nullable<int> _Cat;
	
	private string _ToolName;
	
	private string _ThumbPic;
	
	private string _Content1;
	
	private string _Pic1;
	
	private string _Content2;
	
	private string _Pic2;
	
	private string _Content3;
	
	private string _Pic3;
	
	private string _Content4;
	
	private string _Pic4;
	
	private string _MianContent;
	
	private string _SourceCode;
	
	private EntityRef<CategoryTable> _CategoryTable;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTIdChanging(int value);
    partial void OnTIdChanged();
    partial void OnCatChanging(System.Nullable<int> value);
    partial void OnCatChanged();
    partial void OnToolNameChanging(string value);
    partial void OnToolNameChanged();
    partial void OnThumbPicChanging(string value);
    partial void OnThumbPicChanged();
    partial void OnContent1Changing(string value);
    partial void OnContent1Changed();
    partial void OnPic1Changing(string value);
    partial void OnPic1Changed();
    partial void OnContent2Changing(string value);
    partial void OnContent2Changed();
    partial void OnPic2Changing(string value);
    partial void OnPic2Changed();
    partial void OnContent3Changing(string value);
    partial void OnContent3Changed();
    partial void OnPic3Changing(string value);
    partial void OnPic3Changed();
    partial void OnContent4Changing(string value);
    partial void OnContent4Changed();
    partial void OnPic4Changing(string value);
    partial void OnPic4Changed();
    partial void OnMianContentChanging(string value);
    partial void OnMianContentChanged();
    partial void OnSourceCodeChanging(string value);
    partial void OnSourceCodeChanged();
    #endregion
	
	public ToolTable()
	{
		this._CategoryTable = default(EntityRef<CategoryTable>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int TId
	{
		get
		{
			return this._TId;
		}
		set
		{
			if ((this._TId != value))
			{
				this.OnTIdChanging(value);
				this.SendPropertyChanging();
				this._TId = value;
				this.SendPropertyChanged("TId");
				this.OnTIdChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cat", DbType="Int")]
	public System.Nullable<int> Cat
	{
		get
		{
			return this._Cat;
		}
		set
		{
			if ((this._Cat != value))
			{
				if (this._CategoryTable.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCatChanging(value);
				this.SendPropertyChanging();
				this._Cat = value;
				this.SendPropertyChanged("Cat");
				this.OnCatChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolName", DbType="VarChar(MAX)")]
	public string ToolName
	{
		get
		{
			return this._ToolName;
		}
		set
		{
			if ((this._ToolName != value))
			{
				this.OnToolNameChanging(value);
				this.SendPropertyChanging();
				this._ToolName = value;
				this.SendPropertyChanged("ToolName");
				this.OnToolNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThumbPic", DbType="VarChar(MAX)")]
	public string ThumbPic
	{
		get
		{
			return this._ThumbPic;
		}
		set
		{
			if ((this._ThumbPic != value))
			{
				this.OnThumbPicChanging(value);
				this.SendPropertyChanging();
				this._ThumbPic = value;
				this.SendPropertyChanged("ThumbPic");
				this.OnThumbPicChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content1", DbType="VarChar(MAX)")]
	public string Content1
	{
		get
		{
			return this._Content1;
		}
		set
		{
			if ((this._Content1 != value))
			{
				this.OnContent1Changing(value);
				this.SendPropertyChanging();
				this._Content1 = value;
				this.SendPropertyChanged("Content1");
				this.OnContent1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic1", DbType="VarChar(MAX)")]
	public string Pic1
	{
		get
		{
			return this._Pic1;
		}
		set
		{
			if ((this._Pic1 != value))
			{
				this.OnPic1Changing(value);
				this.SendPropertyChanging();
				this._Pic1 = value;
				this.SendPropertyChanged("Pic1");
				this.OnPic1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content2", DbType="VarChar(MAX)")]
	public string Content2
	{
		get
		{
			return this._Content2;
		}
		set
		{
			if ((this._Content2 != value))
			{
				this.OnContent2Changing(value);
				this.SendPropertyChanging();
				this._Content2 = value;
				this.SendPropertyChanged("Content2");
				this.OnContent2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic2", DbType="VarChar(MAX)")]
	public string Pic2
	{
		get
		{
			return this._Pic2;
		}
		set
		{
			if ((this._Pic2 != value))
			{
				this.OnPic2Changing(value);
				this.SendPropertyChanging();
				this._Pic2 = value;
				this.SendPropertyChanged("Pic2");
				this.OnPic2Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content3", DbType="VarChar(MAX)")]
	public string Content3
	{
		get
		{
			return this._Content3;
		}
		set
		{
			if ((this._Content3 != value))
			{
				this.OnContent3Changing(value);
				this.SendPropertyChanging();
				this._Content3 = value;
				this.SendPropertyChanged("Content3");
				this.OnContent3Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic3", DbType="VarChar(MAX)")]
	public string Pic3
	{
		get
		{
			return this._Pic3;
		}
		set
		{
			if ((this._Pic3 != value))
			{
				this.OnPic3Changing(value);
				this.SendPropertyChanging();
				this._Pic3 = value;
				this.SendPropertyChanged("Pic3");
				this.OnPic3Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content4", DbType="VarChar(MAX)")]
	public string Content4
	{
		get
		{
			return this._Content4;
		}
		set
		{
			if ((this._Content4 != value))
			{
				this.OnContent4Changing(value);
				this.SendPropertyChanging();
				this._Content4 = value;
				this.SendPropertyChanged("Content4");
				this.OnContent4Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pic4", DbType="VarChar(MAX)")]
	public string Pic4
	{
		get
		{
			return this._Pic4;
		}
		set
		{
			if ((this._Pic4 != value))
			{
				this.OnPic4Changing(value);
				this.SendPropertyChanging();
				this._Pic4 = value;
				this.SendPropertyChanged("Pic4");
				this.OnPic4Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MianContent", DbType="VarChar(MAX)")]
	public string MianContent
	{
		get
		{
			return this._MianContent;
		}
		set
		{
			if ((this._MianContent != value))
			{
				this.OnMianContentChanging(value);
				this.SendPropertyChanging();
				this._MianContent = value;
				this.SendPropertyChanged("MianContent");
				this.OnMianContentChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceCode", DbType="VarChar(MAX)")]
	public string SourceCode
	{
		get
		{
			return this._SourceCode;
		}
		set
		{
			if ((this._SourceCode != value))
			{
				this.OnSourceCodeChanging(value);
				this.SendPropertyChanging();
				this._SourceCode = value;
				this.SendPropertyChanged("SourceCode");
				this.OnSourceCodeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_ToolTable", Storage="_CategoryTable", ThisKey="Cat", OtherKey="Id", IsForeignKey=true)]
	public CategoryTable CategoryTable
	{
		get
		{
			return this._CategoryTable.Entity;
		}
		set
		{
			CategoryTable previousValue = this._CategoryTable.Entity;
			if (((previousValue != value) 
						|| (this._CategoryTable.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._CategoryTable.Entity = null;
					previousValue.ToolTables.Remove(this);
				}
				this._CategoryTable.Entity = value;
				if ((value != null))
				{
					value.ToolTables.Add(this);
					this._Cat = value.Id;
				}
				else
				{
					this._Cat = default(Nullable<int>);
				}
				this.SendPropertyChanged("CategoryTable");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
